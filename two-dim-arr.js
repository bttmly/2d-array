// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(root, factory) {
    if (typeof define === "function" && define.amd) {
      define(["exports"], function(_, exports) {
        root.TwoDimensionalArray = factory(root, exports);
      });
    } else if (typeof exports !== "undefined") {
      factory(root, exports);
    } else {
      root.TwoDimensionalArray = factory(root, {});
    }
  })(this, function(root, TwoDimensionalArray) {
    return TwoDimensionalArray = (function(_super) {
      __extends(TwoDimensionalArray, _super);

      function TwoDimensionalArray(dim1size, dim2size, options) {
        var arr, i, j, _i, _j;
        for (i = _i = 0; 0 <= d1 ? _i < d1 : _i > d1; i = 0 <= d1 ? ++_i : --_i) {
          arr = [];
          for (j = _j = 0; 0 <= d2 ? _j < d2 : _j > d2; j = 0 <= d2 ? ++_j : --_j) {
            arr.push((function() {})());
          }
        }
      }

      TwoDimensionalArray.prototype.forEach = function(callback) {
        var i, item, j, row, _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
          row = this[i];
          _results.push((function() {
            var _j, _len1, _ref, _results1;
            _ref = this[0];
            _results1 = [];
            for (j = _j = 0, _len1 = _ref.length; _j < _len1; j = ++_j) {
              item = _ref[j];
              _results1.push(callback(item, i, j, this));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      TwoDimensionalArray.prototype.each = function() {
        return this.forEach.apply(this, arguments);
      };

      TwoDimensionalArray.prototype.map = function(callback) {
        var i, item, j, map, row, _i, _len, _results;
        map = new TwoDimensionalArray(this.length, this[0].length);
        _results = [];
        for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
          row = this[i];
          _results.push((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (j = _j = 0, _len1 = row.length; _j < _len1; j = ++_j) {
              item = row[j];
              _results1.push(map[i][j] = callback(item, i, j, this));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      return TwoDimensionalArray;

    })(Array);
  });

}).call(this);
